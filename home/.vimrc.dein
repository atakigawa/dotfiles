call dein#add('Shougo/dein.vim')

call dein#add('YankRing.vim')

call dein#add('othree/eregex.vim')
let g:eregex_default_enable = 0

call dein#add('tpope/vim-surround')
call dein#add('tpope/vim-repeat')

"unite.vim
call dein#add('Shougo/unite.vim')
call dein#add('Shougo/neomru.vim')
call dein#add('Shougo/vimproc.vim', {'build' : 'make'})
let g:unite_enable_start_insert = 1
nnoremap <silent> <Space>uf :<C-u>Unite -buffer-name=files file_rec/async:!<CR>
nnoremap <silent> <Space>uF :<C-u>UniteWithBufferDir -buffer-name=files file_rec/async:!<CR>
nnoremap <silent> <Space>ur :<C-u>Unite -buffer-name=mru file_mru<CR>
nnoremap <silent> <Space>ub :<C-u>Unite -buffer-name=buffer buffer<CR>

"neocomplete
"neosnippet"
call dein#add('Shougo/neocomplete')
call dein#add('Shougo/neosnippet')
call dein#add('Shougo/neosnippet-snippets')
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#max_list = 30
let g:neosnippet#snippets_directory = "~/.vim/snippets"
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-e> neocomplete#cancel_popup()

"vinarise
call dein#add('Shougo/vinarise')
let g:vinarise_objdump_command='gobjdump'

"speeddating
call dein#add('tpope/vim-speeddating')
nmap <silent> d; <Plug>SpeedDatingNowLocal

"tagbar
call dein#add('majutsushi/tagbar')
let g:tagbar_width = 30
let g:tagbar_sort = 0 "don't sort by name
nnoremap <silent> tl :TagbarToggle<CR>

"NERDTree"
call dein#add('scrooloose/nerdtree')
let g:NERDTreeChDirMode = 0
let g:NERDTreeShowHidden = 1
nmap <silent> <Space>no :NERDTree %:p:h<CR>
nmap <silent> <Space>nt :NERDTreeToggle %:p:h<CR>

"sudo.vim
call dein#add('vim-scripts/sudo.vim')

"coffee syntax
call dein#add('kchmck/vim-coffee-script')
"chuck syntax
call dein#add('vim-scripts/ck.vim')
"json syntax
call dein#add('elzr/vim-json')
let g:vim_json_syntax_conceal = 0
"slim syntax
call dein#add('slim-template/vim-slim')
"js syntax (es6)
call dein#add('othree/yajs.vim')

"solorized color scheme
call dein#add('altercation/vim-colors-solarized')

"cscope
call dein#add('atakigawa/cscope_plus.vim')
let g:cscope_plus_leader_key = "<C-@>"

"golang
call dein#add('fatih/vim-go')
let g:go_fmt_command = "goimports"

set rtp+=/Users/kenken/go/src/github.com/golang/lint/misc/vim

"golang settings
augroup Golang
  autocmd!
  "adjust format options for go
  autocmd FileType go setlocal noexpandtab
  autocmd FileType go setlocal nolist
augroup END

let g:tagbar_type_go = {
  \ 'ctagstype' : 'go',
  \ 'kinds'     : [
      \ 'p:package',
      \ 'i:imports:1',
      \ 'c:constants',
      \ 'v:variables',
      \ 't:types',
      \ 'n:interfaces',
      \ 'w:fields',
      \ 'e:embedded',
      \ 'm:methods',
      \ 'r:constructor',
      \ 'f:functions'
  \ ],
  \ 'sro' : '.',
  \ 'kind2scope' : {
      \ 't' : 'ctype',
      \ 'n' : 'ntype'
  \ },
  \ 'scope2kind' : {
      \ 'ctype' : 't',
      \ 'ntype' : 'n'
  \ },
  \ 'ctagsbin'  : 'gotags',
  \ 'ctagsargs' : '-sort -silent'
  \ }

"ace
call dein#add('yosssi/vim-ace')

"elixir
call dein#add('elixir-lang/vim-elixir')

"syntastic
call dein#add('scrooloose/syntastic')
let g:syntastic_go_checkers = ['go', 'golint', 'govet']
let g:syntastic_python_checkers = ['pep8', 'pyflakes']
let g:syntastic_python_pep8_args = '--ignore=E127,E128,E231,E226,E402'
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_css_checkers = ['prettycss']
let g:syntastic_css_prettycss_args = '-i suggest-relative-unit:px -i browser-only:ie'
let g:syntastic_html_checkers = []

"clojure
call dein#add('guns/vim-clojure-static')
call dein#add('tpope/vim-fireplace')
call dein#add('tpope/vim-classpath')
call dein#add('kien/rainbow_parentheses.vim')
augroup Clojure
  autocmd!
  autocmd FileType clojure RainbowParenthesesActivate
  autocmd FileType clojure RainbowParenthesesLoadRound
  autocmd FileType clojure RainbowParenthesesLoadSquare
  autocmd FileType clojure RainbowParenthesesLoadBraces
  autocmd FileType clojure vnoremap cjp :Eval<CR>
  autocmd FileType clojure nmap cjp ^v%cjp
augroup END
let g:rbpt_colorpairs = [
    \ ['brown',       'firebrick3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ]
let g:rbpt_max = 8
